Volatile tests howto:

- We use pintool to do volatile tests. 

  Prepare pintool:

  * cp pinatrace.cpp to PINTOOL_BASE/source/tools/ManualExamples/
  * cd PINTOOL_BASE/source/tools/ManualExamples
  * TARGET=ia32 make   (suppose we are going to use pintool for 32-bit machine

  To do volatile tests using volatile scripts, you only need to:
  * open evaluate_program.pl: 
  change 
    my $CHECK_VOLATILE = $NO_VOLCHECK;
  to
    my $CHECK_VOLATILE = $USE_VOLCHECK;
    
  * open random_test.pl
  pass "--enable-volatile-tests [x86|x86_64] --vol-addr-file vol_addr.txt" to csmith
  (Note that I've done this for CompCert testing. So if you only need to test CompCert,
   you don't need to do anything here)

  * do normal test using launchn.pl

Some details about pinatrace:

  How to invoke pinatrace hack standalone:
  
  PINTOOL_BASE/ia32/bin/pinbin -t PINTOOL_BASE/source/tools/ManualExamples/obj-ia32/pinatrace.so -vol_input vol_addr.txt [-output_mode verbose|summary] -- foo

  where:
    vol_addr.txt is generated by random programs which contains volatile addresses,

    -output_mode summary
    by default -output_mode is set to summary. In summary mode, only the number of a volatile access will be 
    dumped. Volatile accesses are measured by bytes. For example:

    volatile int g;

    Then pintool will output something like:

    &g: 0: 1 reads, 0 writes
    &g: 1: 1 reads, 0 writes
    &g: 2: 1 reads, 0 writes
    &g: 3: 1 reads, 0 writes
  
    where the numbers on the second col are sequence number of g, 0 means that its the first byte of g, 
    1 means the second byte of g, and so on. 

    -output_mode verbose
    In the verbose mode, all values to be loaded and stored are dumped byte by byte. 
    I didn't integrate the support to the verbose mode into volatile scripts. So the current 
    volatile testing only work in the summary mode. 

